from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup
import markups
import texts
import time
import pymysql
from config import host, user_name, password, db_name
import re
from openpyxl import load_workbook
import gspread
import datetime
import sk
import json
import aioschedule
import asyncio

TOKEN = ''

bot = Bot(TOKEN, parse_mode='Markdown')
db = Dispatcher(bot)

gc = gspread.service_account(filename='retail-397705-2cb2125124db.json')
sh = gc.open_by_url("https://docs.google.com/spreadsheets/d/1c389riVHBioK2N9elinFl6iqxN_OFTo00EXaipvzN-w")

def update(text, user):
    try:
        connection = pymysql.connect(
            host=host,
            port=3306,
            user=user_name,
            password=password,
            database=db_name,
            cursorclass=pymysql.cursors.DictCursor
        )

        try:
            with connection.cursor() as cursor:
                cursor.execute(text)
                connection.commit()
                return 0

        finally:
            connection.close()
    except Exception as ex:
        return f'–û—à–∏–±–∫–∞ {ex}. –ù–µ –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ!\n\n–ü–µ—Ä–µ–¥–∞–π—Ç–µ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é –∏ –Ω–∞–∂–º–∏—Ç–µ *–û–¢–ú–ï–ù–ê*'

def create(text, user):
    try:
        connection = pymysql.connect(
            host=host,
            port=3306,
            user=user_name,
            password=password,
            database=db_name,
            cursorclass=pymysql.cursors.DictCursor
        )

        try:
            with connection.cursor() as cursor:
                cursor.execute(text)
                connection.commit()
                return 0

        finally:
            connection.close()
    except Exception as ex:
        return f'–û—à–∏–±–∫–∞ {ex}. –ù–µ –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ!\n\n–ü–µ—Ä–µ–¥–∞–π—Ç–µ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é –∏ –Ω–∞–∂–º–∏—Ç–µ *–û–¢–ú–ï–ù–ê*'

def selone(text, user):
    try:
        connection = pymysql.connect(
            host=host,
            port=3306,
            user=user_name,
            password=password,
            database=db_name,
            cursorclass=pymysql.cursors.DictCursor
        )

        try:
            with connection.cursor() as cursor:
                cursor.execute(text)
                return cursor.fetchone()

        finally:
            connection.close()
    except Exception as ex:
        return f'–û—à–∏–±–∫–∞ {ex}. –ù–µ –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ!\n\n–ü–µ—Ä–µ–¥–∞–π—Ç–µ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é –∏ –Ω–∞–∂–º–∏—Ç–µ *–û–¢–ú–ï–ù–ê*'

def selist(text, user):
    try:
        connection = pymysql.connect(
            host=host,
            port=3306,
            user=user_name,
            password=password,
            database=db_name,
            cursorclass=pymysql.cursors.DictCursor
        )

        try:
            with connection.cursor() as cursor:
                cursor.execute(text)
                return cursor.fetchall()

        finally:
            connection.close()
    except Exception as ex:
        return f'–û—à–∏–±–∫–∞ {ex}. –ù–µ –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ!\n\n–ü–µ—Ä–µ–¥–∞–π—Ç–µ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é –∏ –Ω–∞–∂–º–∏—Ç–µ *–û–¢–ú–ï–ù–ê*'

def defaul_values(id_user):
    try:
        connection = pymysql.connect(
            host=host,
            port=3306,
            user=user_name,
            password=password,
            database=db_name,
            cursorclass=pymysql.cursors.DictCursor
        )

        try:
            with connection.cursor() as cur:
                cur.execute(f"UPDATE users SET word_5 = ' ', calc_box = 0, price = 0, height = 0, height_flag = 0, length1 = 0, "
                            f"length_flag = 0, width = 0, width_flag = 0, min_price = 0, minus_item2 = 0, "
                            f"xl_ul = 0, xl_ul_text = '', xl_tel = 0, xl_tel_text = 0, xl_type = 0, "
                            f"xl_type_text = '', xl_count_type = 0, xl_count_type_text = 0, xl_mark = 0, "
                            f"xl_mark_text = '', xl_pack = 0, xl_pack_text = '', xl_comment = 0, "
                            f"xl_comment_text = '', xl_city = 0, xl_city_text = '', xl_count_box = 0, "
                            f"xl_count_box_text = 0, xl_count_items = 0, xl_count_items_text = '', "
                            f"xl_comment_city = 0, xl_comment_city_text = '', xl_markbox = 0, xl_markbox_text = '', "
                            f"logistic = 0, ff = 0, new_id_user = 0, new_id_user_text = '', new_name_user = 0, "
                            f"remove_user = 0, fbo_15 = 0, new_car_city = 0, new_car_plan_start = 0, "
                            f"new_car_plan_end = 0, car_drive = 0, num_car = 0, drive_num = 0, gate = 0, "
                            f"find_car = 0, car_city = 0, chcar = 0, del_car = 0, find_zakaz = 0, sumpd = 0, "
                            f"countpd = 0, text_user = 0, id_fbo = 0, new_car_city_text = '', zak_day = 0, "
                            f"zak_mon = 0, zak_year = 0, ef_day = 0, ef_mon = 0, ef_year = 0, zabor = 0, "
                            f"ed_day = 0, ed_mon = 0, ed_year = 0, prib_day = 0, prib_mon = 0, prib_year = 0, "
                            f"fbo_16 = 0, chcar_2 = 0, remove_user_adm = 0, fbo_11 = 0, fbo_18 = 0, fbo_18_1 = 0, "
                            f"gate_2 = 0, find_car = 0, find_car_4 = 0, weight = 0, count_pal_flag = 0, "
                            f"max_id_item = 0, add_set_0 = 0, add_set_1 = 0, add_set_4 = 0, "
                            f"add_set_5 = 0, add_set_6 = 0, add_set_7 = 0, add_set_8 = 0, add_set_9 = 0, "
                            f"add_set_10 = 0, add_set_11 = 0, add_set_12 = 0, add_set_13 = 0, find_item = 0, "
                            f"what_in_box = 0, choose_ul = '', edit_item = 0, all_edit_item = 0, choose_id = '', "
                            f"choose_pr = '', edit_pr = 0, add_ul = 0, plus_new_sell = 0, plus_new_sell2 = 0, "
                            f"plus_new_sell3 = 0, count_wb = 0, count_ozon = 0, edit_box = 0, edit_box_item = 0, "
                            f"choose_box = '', edit_box_item_add = 0, find_item_id = 0, edit_ul_2 = 0, "
                            f"new_id_user = 0, new_id_user_text = '', new_name_user = 0, remove_user = 0, "
                            f"plus_new_sell4 = 0, text_user = 0, count_wb_60 = 0, count_ozon_60 = 0, "
                            f"count_wb_120 = 0, count_ozon_120 = 0, count_wb_max = 0, count_ozon_max = 0, "
                            f"plus_new_sell5 = 0, plus_new_sell6 = 0, plus_new_sell7 = 0, plus_new_sell8 = 0, "
                            f"plus_new_sell9 = 0, remove_user_adm = 0, find_item2 = 0, choose_ul_id = 0, act_sk = ' ', "
                            f"act_log = ' ' WHERE id_user = '{id_user}'")
                connection.commit()
                return 0

        finally:
            connection.close()
    except Exception as ex:
        return f'–û—à–∏–±–∫–∞ {ex}. –ù–µ –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ!\n\n–ü–µ—Ä–µ–¥–∞–π—Ç–µ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é –∏ –Ω–∞–∂–º–∏—Ç–µ *–û–¢–ú–ï–ù–ê*'


async def startup(_):
    print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω')

@db.message_handler(commands='info')
async def info_command(message: types.Message):
    id_user_get = f'`{message.chat.id}`'
    await message.answer(text=id_user_get, parse_mode='Markdown')

@db.message_handler(commands='test')
async def test_command(message: types.Message):
    user = message.chat.id
    msg = await message.answer('–ü—Ä–∏–≤–µ—Ç')
    await bot.delete_message(user, msg.message_id)

@db.message_handler(commands='start')
async def start_command(message: types.Message):
    user = message.chat.id
    if selone(f"SELECT id_user FROM users WHERE id_user = '{user}'", user) is None or (selone(f"SELECT company FROM users WHERE id_user = '{user}'", user)["company"] != '–í–æ–¥–∏—Ç–µ–ª—å' and selone(f"SELECT company FROM users WHERE id_user = '{user}'", user)["company"] != '–ë–æ—Å—Å'):
        await message.answer(text=texts.start_text)
    else:
        if selone(f"SELECT driver FROM users WHERE id_user = '{user}'", user)['driver'] == 0:
            await message.answer(text=texts.start_text)
        else:
            if selone(f"SELECT driver FROM users WHERE id_user = '{user}'", user)['driver'] == 2:
                await message.answer(text=texts.menu_name, reply_markup=markups.menu_log_n)
            elif selone(f"SELECT driver FROM users WHERE id_user = '{user}'", user)['driver'] == 1:
                await message.answer(text=texts.menu_name, reply_markup=markups.menu_log_b)
            else:
                await message.answer(text='–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!')

@db.message_handler(content_types=['photo'])
async def handle_docs_photo(message):
    user = message.chat.id
    try:
        await message.answer(text=message)
    except Exception as e:
        await bot.send_message(-4077236615, f'üöö –ë–æ—Ç –ª–æ–≥–∏—Å—Ç–∏–∫–∏\n\n{user}\n–û—à–∏–±–∫–∞ 196\n{e}')

@db.callback_query_handler()
async def action_callback(callback: types.CallbackQuery):
    user = callback.message.chat.id
    datework = sk.date_create()
    if 'crash_no' == callback.data:
        await callback.message.delete()
        res = selone(f"SELECT act_log FROM users WHERE id_user = '{user}'", user)['act_log'].split('_')
        update(f"UPDATE users SET act_log = ' ' WHERE id_user = '{user}'", user)
        datework = sk.date_create()
        create(f"INSERT INTO `data`.`work_drive` (`date_work`, `crash_auto`, `km_auto`) VALUES ('{datework}', '–ù–µ—Ç', '{res[1]}')", user)

        admins = selist(f"SELECT id_user FROM users WHERE driver = 1", user)
        for adm in admins:
            id_adm = adm['id_user']
            update(f"UPDATE users SET driver = 2 WHERE id_user = '{id_adm}'", user)

        name_user_log = selone(f"SELECT name_user FROM users WHERE id_user = '{user}'", user)['name_user']

        list_all_users = selist(f"SELECT * FROM users", user)
        list_users = []
        for us in list_all_users:
            if 'admin' in us['notif']:
                list_users.append(us)
        for user1 in list_users:
            try:
                chat_id = str(user1["id_user"])
                destination_bot = Bot(token='6682205213:AAFFV1avM8cVCZhgv-K8pzKeJ_c20Wle_P4')
                await destination_bot.send_message(chat_id, f'–í–æ–¥–∏—Ç–µ–ª—å *{name_user_log}* –≤—ã—à–µ–ª –Ω–∞ —Å–º–µ–Ω—É\n\n–ü–æ–∫–∞–∑–∞–Ω–∏—è –ø—Ä–æ–±–µ–≥–∞: *{res[1]}*', parse_mode='Markdown')
            except Exception as e:
                await bot.send_message(-4077236615, f'üöö –ë–æ—Ç –ª–æ–≥–∏—Å—Ç–∏–∫–∏\n\n{user}\n–û—à–∏–±–∫–∞ 237\n{e}')

        await callback.message.answer(text='–°–º–µ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∞!', reply_markup=markups.menu_log_n)
        await callback.answer()
    elif 'crash_yes' == callback.data:
        await callback.message.delete()
        res = selone(f"SELECT act_log FROM users WHERE id_user = '{user}'", user)['act_log'].split('_')

        new_res = 'cryes_' + res[1]
        update(f"UPDATE users SET act_log = '{new_res}' WHERE id_user = '{user}'", user)

        await callback.message.answer(text='–û–ø–∏—à–∏—Ç–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è –∫–∞–∫ –º–æ–∂–Ω–æ —Ç–æ—á–Ω–µ–µ:', reply_markup=markups.back)
        await callback.answer()
    elif 'access_' in callback.data:
        if len(selist(f"SELECT * FROM shipping WHERE date_ship = '{datework}' AND status_ship = '–ü—Ä–∏–Ω—è—Ç'", user)) == 0:
            id_ship = callback.data.split('_')[1]
            str_id_list = selone(f"SELECT id_list FROM users WHERE id_user = '{user}'", user)['id_list']
            update(f"UPDATE users SET id_list = ' ' WHERE id_user = '{user}'", user)
            if str_id_list != ' ' and '_' in str_id_list:
                id_list = str_id_list.split('_')
                for i in id_list:
                    await bot.delete_message(user, i)
            else:
                await callback.message.delete()

            adress = selone(f"SELECT adress_begin FROM shipping WHERE id_ship = '{id_ship}'", user)['adress_begin']

            inline_m = InlineKeyboardMarkup(row_width=2)
            inline_m_b1 = InlineKeyboardButton(text='–î–∞, –∞–¥—Ä–µ—Å –≤–µ—Ä–µ–Ω', callback_data=f'wait_{id_ship}')
            inline_m_b2 = InlineKeyboardButton(text='–ê–¥—Ä–µ—Å –Ω–µ –≤–µ—Ä–µ–Ω', callback_data=f'waitno_{id_ship}')
            inline_m.add(inline_m_b1).add(inline_m_b2)

            await callback.message.answer(text=f'–ö–ª–∏–µ–Ω—Ç –∂–¥—ë—Ç –ø–æ –∞–¥—Ä–µ—Å—É {adress}?', reply_markup=inline_m)
            await callback.answer()
        else:
            await callback.message.answer(text='–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø—Ä–∏–Ω—è—Ç–∞—è –∑–∞—è–≤–∫–∞')
            l = selist(f"SELECT * FROM shipping WHERE date_ship = '{datework}' AND status_ship = '–ü—Ä–∏–Ω—è—Ç'", user)[0]

            inline_m = InlineKeyboardMarkup(row_width=2)
            inline_m_b1 = InlineKeyboardButton(text='–ó–∞–≥—Ä—É–∑–∏–ª—Å—è', callback_data=f'wacc_{l["id_ship"]}')
            inline_m_b2 = InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞ –∑–∞—è–≤–∫–∏', callback_data=f'cancel_{l["id_ship"]}')
            inline_m.add(inline_m_b1).add(inline_m_b2)
            await message.answer(text=f'ID: *{l["id_ship"]}*\n'
                                      f'–¢–∏–ø: *{l["type_ship"]}*\n'
                                      f'–î–∞—Ç–∞: *{l["date_ship"]}*\n'
                                      f'–í—Ä–µ–º—è: *{l["time_ship"]}*\n'
                                      f'–ü—Ä–µ–¥–º–µ—Ç: *{l["item_ship"]}*\n'
                                      f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: *{l["count_item_ship"]}*\n'
                                      f'–í–µ—Å: *{l["w_ship"]}*\n\n'
                                      f'–ê–¥—Ä–µ—Å –∑–∞–≥—Ä—É–∑–∫–∏: `{l["adress_begin"]}`\n'
                                      f'–¢–µ–ª–µ—Ñ–æ–Ω –∑–∞–≥—Ä—É–∑–∫–∏: `{l["phone_begin"]}`\n'
                                      f'–ê–¥—Ä–µ—Å —Ä–∞–∑–≥—Ä—É–∑–∫–∏: `{l["adress_end"]}`\n'
                                      f'–¢–µ–ª–µ—Ñ–æ–Ω —Ä–∞–∑–≥—Ä—É–∑–∫–∏: `{l["phone_end"]}`\n'
                                      f'–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: *{l["comment_ship"]}*\n\n'
                                      f'–°—Ç–∞—Ç—É—Å: *{l["status_ship"]}*', parse_mode='Markdown', reply_markup=inline_m)
            await callback.answer()
    elif 'wait_' in callback.data:
        await callback.message.delete()
        id_ship = callback.data.split('_')[1]
        await callback.message.answer(text='–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!', reply_markup=markups.menu_log_n)
        update(f"UPDATE users SET act_log = ' ' WHERE id_user = '{user}'", user)
        update(f"UPDATE shipping SET status_ship = '–ü—Ä–∏–Ω—è—Ç' WHERE id_ship = '{id_ship}'", user)
        time_sk = sk.date_and_time_create()
        update(f"UPDATE shipping SET begin_ship = '{time_sk}' WHERE id_ship = '{id_ship}'", user)
        l = selist(f"SELECT * FROM shipping WHERE id_ship = '{id_ship}'", user)[0]
        inline_m = InlineKeyboardMarkup(row_width=2)
        inline_m_b1 = InlineKeyboardButton(text='–ó–∞–≥—Ä—É–∑–∏–ª—Å—è', callback_data=f'wacc_{l["id_ship"]}')
        inline_m_b2 = InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞ –∑–∞—è–≤–∫–∏', callback_data=f'cancel_{l["id_ship"]}')
        inline_m.add(inline_m_b1).add(inline_m_b2)
        await callback.message.answer(text=f'ID: *{l["id_ship"]}*\n'
                                  f'–¢–∏–ø: *{l["type_ship"]}*\n'
                                  f'–î–∞—Ç–∞: *{l["date_ship"]}*\n'
                                  f'–í—Ä–µ–º—è: *{l["time_ship"]}*\n'
                                  f'–ü—Ä–µ–¥–º–µ—Ç: *{l["item_ship"]}*\n'
                                  f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: *{l["count_item_ship"]}*\n'
                                  f'–í–µ—Å: *{l["w_ship"]}*\n\n'
                                  f'–ê–¥—Ä–µ—Å –∑–∞–≥—Ä—É–∑–∫–∏: `{l["adress_begin"]}`\n'
                                  f'–¢–µ–ª–µ—Ñ–æ–Ω –∑–∞–≥—Ä—É–∑–∫–∏: `{l["phone_begin"]}`\n'
                                  f'–ê–¥—Ä–µ—Å —Ä–∞–∑–≥—Ä—É–∑–∫–∏: `{l["adress_end"]}`\n'
                                  f'–¢–µ–ª–µ—Ñ–æ–Ω —Ä–∞–∑–≥—Ä—É–∑–∫–∏: `{l["phone_end"]}`\n'
                                  f'–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: *{l["comment_ship"]}*\n\n'
                                  f'–°—Ç–∞—Ç—É—Å: *{l["status_ship"]}*', parse_mode='Markdown', reply_markup=inline_m)

        if l["type_ship"] == '–ó–∞–±–æ—Ä' and l["nons"] != '0':
            nons_us = l["nons"]
            update(f"UPDATE new_fbo SET status_zakaz = 82 WHERE nons = '{nons_us}'", user)

            list_zakaz = selist(f"SELECT * FROM new_fbo WHERE nons = '{nons_us}'", user)
            id_user = list_zakaz[0]["own_zakaz"]
            list_client = selist(f"SELECT * FROM clients WHERE id_user = '{id_user}'", user)

            zakaz_text = f'–£ –í–∞—à–µ–π –∑–∞—è–≤–∫–∏ —Å ID {list_zakaz[0]["id_zakaz"]} –∏–∑–º–µ–Ω–∏–ª—Å—è —Å—Ç–∞—Ç—É—Å!\n' \
                         f'\n<i>–°–∫–ª–∞–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏:</i> <b>{list_zakaz[0]["city"]}</b>' \
                         f'\n<i>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞:</i> <b>{list_zakaz[0]["count_items"]}</b>' \
                         f'\n<i>–°—Ç–∞—Ç—É—Å:</i> <b>–í–æ–¥–∏—Ç–µ–ª—å –≤—ã–µ—Ö–∞–ª –∫ –í–∞–º</b>'

            try:
                chat_id = str(id_user)
                destination_bot = Bot(token='6220819545:AAFS7TBQlmaZfpBEyoooOL-ac0YZQFxzec0')
                await destination_bot.send_message(chat_id, zakaz_text, parse_mode='html')
            except Exception as e:
                await bot.send_message(-4077236615, f'üöö –ë–æ—Ç –ª–æ–≥–∏—Å—Ç–∏–∫–∏\n\n{user}\n–û—à–∏–±–∫–∞ 306\n{e}')

        await callback.answer()
    elif 'waitno_' in callback.data:
        await callback.message.delete()
        id_ship = callback.data.split('_')[1]
        new_res = 'waitno_' + id_ship
        update(f"UPDATE users SET act_log = '{new_res}' WHERE id_user = '{user}'", user)
        await callback.message.answer(text='–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å:')
        await callback.answer()
    elif 'nophone_' in callback.data:
        if len(selist(f"SELECT * FROM shipping WHERE date_ship = '{datework}' AND status_ship = '–ü—Ä–∏–Ω—è—Ç'", user)) == 0:
            id_ship = callback.data.split('_')[1]
            str_id_list = selone(f"SELECT id_list FROM users WHERE id_user = '{user}'", user)['id_list']
            update(f"UPDATE users SET id_list = ' ' WHERE id_user = '{user}'", user)
            if str_id_list != ' ' and '_' in str_id_list:
                id_list = str_id_list.split('_')
                for i in id_list:
                    await bot.delete_message(user, i)
            else:
                await callback.message.delete()

            inline_m = InlineKeyboardMarkup(row_width=2)
            inline_m_b1 = InlineKeyboardButton(text='–î–∞', callback_data=f'yessure_{id_ship}')
            inline_m_b2 = InlineKeyboardButton(text='–ù–µ—Ç', callback_data=f'nosure_{id_ship}')
            inline_m.add(inline_m_b1).add(inline_m_b2)

            await callback.message.answer(text=f'–í—ã —É–≤–µ—Ä–µ–Ω—ã?', reply_markup=inline_m)
            await callback.answer()
        else:
            await callback.message.answer(text='–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø—Ä–∏–Ω—è—Ç–∞—è –∑–∞—è–≤–∫–∞')
            l = selist(f"SELECT * FROM shipping WHERE date_ship = '{datework}' AND status_ship = '–ü—Ä–∏–Ω—è—Ç'", user)[0]

            inline_m = InlineKeyboardMarkup(row_width=2)
            inline_m_b1 = InlineKeyboardButton(text='–ó–∞–≥—Ä—É–∑–∏–ª—Å—è', callback_data=f'wacc_{l["id_ship"]}')
            inline_m_b2 = InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞ –∑–∞—è–≤–∫–∏', callback_data=f'cancel_{l["id_ship"]}')
            inline_m.add(inline_m_b1).add(inline_m_b2)
            await message.answer(text=f'ID: *{l["id_ship"]}*\n'
                                      f'–¢–∏–ø: *{l["type_ship"]}*\n'
                                      f'–î–∞—Ç–∞: *{l["date_ship"]}*\n'
                                      f'–í—Ä–µ–º—è: *{l["time_ship"]}*\n'
                                      f'–ü—Ä–µ–¥–º–µ—Ç: *{l["item_ship"]}*\n'
                                      f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: *{l["count_item_ship"]}*\n'
                                      f'–í–µ—Å: *{l["w_ship"]}*\n\n'
                                      f'–ê–¥—Ä–µ—Å –∑–∞–≥—Ä—É–∑–∫–∏: `{l["adress_begin"]}`\n'
                                      f'–¢–µ–ª–µ—Ñ–æ–Ω –∑–∞–≥—Ä—É–∑–∫–∏: `{l["phone_begin"]}`\n'
                                      f'–ê–¥—Ä–µ—Å —Ä–∞–∑–≥—Ä—É–∑–∫–∏: `{l["adress_end"]}`\n'
                                      f'–¢–µ–ª–µ—Ñ–æ–Ω —Ä–∞–∑–≥—Ä—É–∑–∫–∏: `{l["phone_end"]}`\n'
                                      f'–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: *{l["comment_ship"]}*\n\n'
                                      f'–°—Ç–∞—Ç—É—Å: *{l["status_ship"]}*', parse_mode='Markdown', reply_markup=inline_m)
            await callback.answer()
    elif 'yessure_' in callback.data:
        await callback.message.delete()
        id_ship = callback.data.split('_')[1]
        update(f"UPDATE shipping SET status_ship = '–ù–µ –¥–æ–∑–≤–æ–Ω–∏–ª—Å—è' WHERE id_ship = '{id_ship}'", user)
        await callback.message.answer(text='–°—Ç–∞—Ç—É—Å –Ω–µ –¥–æ–∑–≤–æ–Ω–∏–ª—Å—è –ø—Ä–æ—Å—Ç–∞–≤–ª–µ–Ω!', reply_markup=markups.menu_log_n)

        l = selist(f"SELECT * FROM shipping WHERE id_ship = '{id_ship}'", user)[0]
        if l["type_ship"] == '–ó–∞–±–æ—Ä' and l["nons"] != '0':
            nons_us = l["nons"]
            update(f"UPDATE new_fbo SET status_zakaz = 82 WHERE nons = '{nons_us}'", user)

            list_zakaz = selist(f"SELECT * FROM new_fbo WHERE nons = '{nons_us}'", user)
            id_user = list_zakaz[0]["own_zakaz"]
            list_client = selist(f"SELECT * FROM clients WHERE id_user = '{id_user}'", user)

            zakaz_text = f'<b>–í–æ–¥–∏—Ç–µ–ª—å –¥–æ –í–∞—Å –Ω–µ –¥–æ–∑–≤–æ–Ω–∏–ª—Å—è</b>'

            try:
                chat_id = str(id_user)
                destination_bot = Bot(token='6220819545:AAFS7TBQlmaZfpBEyoooOL-ac0YZQFxzec0')
                await destination_bot.send_message(chat_id, zakaz_text, parse_mode='html')
            except Exception as e:
                await bot.send_message(-4077236615, f'üöö –ë–æ—Ç –ª–æ–≥–∏—Å—Ç–∏–∫–∏\n\n{user}\n–û—à–∏–±–∫–∞ 371\n{e}')

        await callback.answer()
    elif 'nosure_' in callback.data:
        await callback.message.delete()
        id_ship = callback.data.split('_')[1]

        l = selist(f"SELECT * FROM shipping WHERE id_ship = '{id_ship}'", user)[0]

        inline_m = InlineKeyboardMarkup(row_width=2)
        inline_m_b1 = InlineKeyboardButton(text='–ü—Ä–∏–Ω—è—Ç—å', callback_data=f'access_{l["id_ship"]}')
        inline_m_b2 = InlineKeyboardButton(text='–ù–µ –¥–æ–∑–≤–æ–Ω–∏–ª—Å—è', callback_data=f'nophone_{l["id_ship"]}')
        inline_m_b3 = InlineKeyboardButton(text='–ü–µ—Ä–µ–Ω–æ—Å', callback_data=f'edite_{l["id_ship"]}')
        inline_m.add(inline_m_b1, inline_m_b2).add(inline_m_b3)
        await callback.message.answer(text=f'ID: *{l["id_ship"]}*\n'
                                           f'–¢–∏–ø: *{l["type_ship"]}*\n'
                                           f'–î–∞—Ç–∞: *{l["date_ship"]}*\n'
                                           f'–í—Ä–µ–º—è: *{l["time_ship"]}*\n'
                                           f'–ü—Ä–µ–¥–º–µ—Ç: *{l["item_ship"]}*\n'
                                           f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: *{l["count_item_ship"]}*\n'
                                           f'–í–µ—Å: *{l["w_ship"]}*\n\n'
                                           f'–ê–¥—Ä–µ—Å –∑–∞–≥—Ä—É–∑–∫–∏: `{l["adress_begin"]}`\n'
                                           f'–¢–µ–ª–µ—Ñ–æ–Ω –∑–∞–≥—Ä—É–∑–∫–∏: `{l["phone_begin"]}`\n'
                                           f'–ê–¥—Ä–µ—Å —Ä–∞–∑–≥—Ä—É–∑–∫–∏: `{l["adress_end"]}`\n'
                                           f'–¢–µ–ª–µ—Ñ–æ–Ω —Ä–∞–∑–≥—Ä—É–∑–∫–∏: `{l["phone_end"]}`\n'
                                           f'–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: *{l["comment_ship"]}*\n\n'
                                           f'–°—Ç–∞—Ç—É—Å: *{l["status_ship"]}*', parse_mode='Markdown',
                                      reply_markup=inline_m)
        await callback.answer()
    elif 'wacc_' in callback.data:
        id_ship = callback.data.split('_')[1]

        str_id_list = selone(f"SELECT id_list FROM users WHERE id_user = '{user}'", user)['id_list']
        update(f"UPDATE users SET id_list = ' ' WHERE id_user = '{user}'", user)
        if str_id_list != ' ' and '_' in str_id_list:
            id_list = str_id_list.split('_')
            for i in id_list:
                await bot.delete_message(user, i)
        else:
            await callback.message.delete()

        item_ship = selone(f"SELECT item_ship FROM shipping WHERE id_ship = '{id_ship}'", user)['item_ship']

        if selone(f"SELECT count_item_ship FROM shipping WHERE id_ship = '{id_ship}'", user)['count_item_ship'] == '–ù–µ —É–∫–∞–∑–∞–Ω–æ':
            update(f"UPDATE users SET act_log = ' ' WHERE id_user = '{user}'", user)
            update(f"UPDATE shipping SET status_ship = '–ï–¥–µ—Ç –∫ –ø–æ–ª—É—á–∞—Ç–µ–ª—é' WHERE id_ship = '{id_ship}'", user)

            l = selist(f"SELECT * FROM shipping WHERE id_ship = '{id_ship}'", user)[0]

            inline_m = InlineKeyboardMarkup(row_width=2)
            inline_m_b1 = InlineKeyboardButton(text='–†–∞–∑–≥—Ä—É–∑–∏–ª—Å—è', callback_data=f'done_{l["id_ship"]}')
            inline_m.add(inline_m_b1)
            await callback.message.answer(text=f'ID: *{l["id_ship"]}*\n'
                                      f'–¢–∏–ø: *{l["type_ship"]}*\n'
                                      f'–î–∞—Ç–∞: *{l["date_ship"]}*\n'
                                      f'–í—Ä–µ–º—è: *{l["time_ship"]}*\n'
                                      f'–ü—Ä–µ–¥–º–µ—Ç: *{l["item_ship"]}*\n'
                                      f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: *{l["count_item_ship"]}*\n'
                                      f'–í–µ—Å: *{l["w_ship"]}*\n\n'
                                      f'–ê–¥—Ä–µ—Å –∑–∞–≥—Ä—É–∑–∫–∏: `{l["adress_begin"]}`\n'
                                      f'–¢–µ–ª–µ—Ñ–æ–Ω –∑–∞–≥—Ä—É–∑–∫–∏: `{l["phone_begin"]}`\n'
                                      f'–ê–¥—Ä–µ—Å —Ä–∞–∑–≥—Ä—É–∑–∫–∏: `{l["adress_end"]}`\n'
                                      f'–¢–µ–ª–µ—Ñ–æ–Ω —Ä–∞–∑–≥—Ä—É–∑–∫–∏: `{l["phone_end"]}`\n'
                                      f'–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: *{l["comment_ship"]}*\n\n'
                                      f'–°—Ç–∞—Ç—É—Å: *{l["status_ship"]}*', parse_mode='Markdown', reply_markup=inline_m)
        else:
            new_res = 'wacc_' + id_ship
            update(f"UPDATE users SET act_log = '{new_res}' WHERE id_user = '{user}'", user)
            await callback.message.answer(text=f'–ö–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–∏ ¬´{item_ship}¬ª –≤—ã –∑–∞–±—Ä–∞–ª–∏?', reply_markup=markups.back)
        await callback.answer()
    elif 'cancel_' in callback.data:
        id_ship = callback.data.split('_')[1]

        str_id_list = selone(f"SELECT id_list FROM users WHERE id_user = '{user}'", user)['id_list']
        update(f"UPDATE users SET id_list = ' ' WHERE id_user = '{user}'", user)
        if str_id_list != ' ' and '_' in str_id_list:
            id_list = str_id_list.split('_')
            for i in id_list:
                await bot.delete_message(user, i)
        else:
            await callback.message.delete()

        inline_m = InlineKeyboardMarkup(row_width=2)
        inline_m_b1 = InlineKeyboardButton(text='–î–∞', callback_data=f'yescenc_{id_ship}')
        inline_m_b2 = InlineKeyboardButton(text='–ù–µ—Ç', callback_data=f'noscenc_{id_ship}')
        inline_m.add(inline_m_b1).add(inline_m_b2)

        await callback.message.answer(text=f'–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É?', reply_markup=inline_m)
        await callback.answer()
    elif 'yescenc_' in callback.data:
        await callback.message.delete()
        id_ship = callback.data.split('_')[1]
        list_ship = selist(f"SELECT * FROM shipping WHERE id_ship = '{id_ship}'", user)[0]

        list_all_users = selist(f"SELECT * FROM users WHERE company = '–ë–æ—Å—Å'", user)
        list_users = []
        for us in list_all_users:
            if 'log' in us['notif']:
                list_users.append(us)
        for user1 in list_users:
            try:
                chat_id = str(user1["id_user"])
                destination_bot = Bot(token='6682205213:AAFFV1avM8cVCZhgv-K8pzKeJ_c20Wle_P4')
                await destination_bot.send_message(chat_id, f'–ó–∞—è–≤–∫–∞ —Å ID: {id_ship} –æ—Ç–º–µ–Ω–µ–Ω–∞.\n\n'
                                                            f'–¢–∏–ø: *{list_ship["type_ship"]}*\n'
                                                            f'–ü—Ä–µ–¥–º–µ—Ç: *{list_ship["item_ship"]}*\n'
                                                            f'–ê–¥—Ä–µ—Å –∑–∞–≥—Ä—É–∑–∫–∏: *{list_ship["adress_begin"]}*\n'
                                                            f'–ê–¥—Ä–µ—Å —Ä–∞–∑–≥—Ä—É–∑–∫–∏: *{list_ship["adress_end"]}*\n', parse_mode='Markdown')
            except Exception as e:
                await bot.send_message(-4077236615, f'üöö –ë–æ—Ç –ª–æ–≥–∏—Å—Ç–∏–∫–∏\n\n{user}\n–û—à–∏–±–∫–∞ 460\n{str(user1["id_user"])}\n{e}')

        update(f"UPDATE shipping SET status_ship = '–û—Ç–º–µ–Ω–µ–Ω' WHERE id_ship = '{id_ship}'", user)
        await callback.message.answer(text='–°—Ç–∞—Ç—É—Å ¬´–û—Ç–º–µ–Ω–µ–Ω¬ª –ø—Ä–æ—Å—Ç–∞–≤–ª–µ–Ω!', reply_markup=markups.menu_log_n)

        l = selist(f"SELECT * FROM shipping WHERE id_ship = '{id_ship}'", user)[0]
        if l["type_ship"] == '–ó–∞–±–æ—Ä' and l["nons"] != '0':
            nons_us = l["nons"]
            update(f"UPDATE new_fbo SET status_zakaz = 80 WHERE nons = '{nons_us}'", user)

            list_zakaz = selist(f"SELECT * FROM new_fbo WHERE nons = '{nons_us}'", user)
            id_user = list_zakaz[0]["own_zakaz"]
            list_client = selist(f"SELECT * FROM clients WHERE id_user = '{id_user}'", user)

            zakaz_text = f'<b>–ó–∞–±–æ—Ä —Ç–æ–≤–∞—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω!</b>'

            try:
                chat_id = str(id_user)
                destination_bot = Bot(token='6220819545:AAFS7TBQlmaZfpBEyoooOL-ac0YZQFxzec0')
                await destination_bot.send_message(chat_id, zakaz_text, parse_mode='html')
            except Exception as e:
                await bot.send_message(-4077236615, f'üöö –ë–æ—Ç –ª–æ–≥–∏—Å—Ç–∏–∫–∏\n\n{user}\n–û—à–∏–±–∫–∞ 481\n{e}')

        await callback.answer()
    elif 'noscenc_' in callback.data:
        await callback.message.delete()
        await callback.message.answer(text= '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=markups.menu_log_n)
        await callback.answer()
    elif 'done_' in callback.data:
        id_ship = callback.data.split('_')[1]

        str_id_list = selone(f"SELECT id_list FROM users WHERE id_user = '{user}'", user)['id_list']
        update(f"UPDATE users SET id_list = ' ' WHERE id_user = '{user}'", user)
        if str_id_list != ' ' and '_' in str_id_list:
            id_list = str_id_list.split('_')
            for i in id_list:
                await bot.delete_message(user, i)
        else:
            await callback.message.delete()

        new_res = 'done_' + id_ship
        update(f"UPDATE users SET act_log = '{new_res}' WHERE id_user = '{user}'", user)

        await callback.message.answer(text=f'–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è, –∫—Ç–æ –ø—Ä–∏–Ω—è–ª —É –≤–∞—Å –≥—Ä—É–∑:')
        await callback.answer()
    elif 'edite_' in callback.data:

        id_ship = callback.data.split('_')[1]
        str_id_list = selone(f"SELECT id_list FROM users WHERE id_user = '{user}'", user)['id_list']
        update(f"UPDATE users SET id_list = ' ' WHERE id_user = '{user}'", user)
        if str_id_list != ' ' and '_' in str_id_list:
            id_list = str_id_list.split('_')
            for i in id_list:
                await bot.delete_message(user, i)
        else:
            await callback.message.delete()
        new_res = 'edite_' + id_ship
        update(f"UPDATE users SET act_log = '{new_res}' WHERE id_user = '{user}'", user)
        await callback.message.answer(text='–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ 21.12.2012:')
        await callback.answer()
    elif 'ref_' in callback.data:
        id_item = callback.data.split('_')[1]
        req = f'ref_{id_item}'
        update(f"UPDATE users SET act_log = '{req}' WHERE id_user = '{user}'", user)
        await callback.message.edit_text(text=f'–í–≤–µ–¥–∏—Ç–µ *–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ*, –∫–æ—Ç–æ—Ä–æ–µ –∑–∞–±—Ä–∞–ª–∏:', parse_mode='Markdown')
        await callback.answer()

@db.message_handler()
async def send_text(message: types.Message):
    user = message.chat.id
    datework = sk.date_create()

    if user == -4077236615:
        pass

    else:
        if selone(f"SELECT id_user FROM users WHERE id_user = '{user}'", user) is None or (
                selone(f"SELECT company FROM users WHERE id_user = '{user}'", user)["company"] != '–í–æ–¥–∏—Ç–µ–ª—å' and
                selone(f"SELECT company FROM users WHERE id_user = '{user}'", user)["company"] != '–ë–æ—Å—Å'):
            await message.answer(text=texts.start_text)
        else:
            if selone(f"SELECT driver FROM users WHERE id_user = '{user}'", user)['driver'] == 0:
                await message.answer(text=texts.start_text)
            else:
                # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                if message.text == markups.menu_main:
                    defaul_values(user)
                    if selone(f"SELECT driver FROM users WHERE id_user = '{user}'", user)['driver'] == 2:
                        await message.answer(text=texts.menu_name, reply_markup=markups.menu_log_n)
                    elif selone(f"SELECT driver FROM users WHERE id_user = '{user}'", user)['driver'] == 1:
                        await message.answer(text=texts.menu_name, reply_markup=markups.menu_log_b)
                    else:
                        await message.answer(text='–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!')

                # –û—Ç–º–µ–Ω–∞
                elif message.text == markups.menu_back:
                    defaul_values(user)
                    if selone(f"SELECT driver FROM users WHERE id_user = '{user}'", user)['driver'] == 2:
                        await message.answer(text=texts.menu_name, reply_markup=markups.menu_log_n)
                    elif selone(f"SELECT driver FROM users WHERE id_user = '{user}'", user)['driver'] == 1:
                        await message.answer(text=texts.menu_name, reply_markup=markups.menu_log_b)
                    else:
                        await message.answer(text='–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!')

                # –û—Ç–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É
                elif message.text == markups.menu_log_b4:
                    datework = sk.date_create()
                    if selone(f"SELECT driver FROM users WHERE id_user = '{user}'", user)['driver'] == 2:
                        await message.answer(text='–°–º–µ–Ω–∞ –±—ã–ª–∞ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞!', reply_markup=markups.menu_log_n)
                    else:
                        if selone(f"SELECT date_work FROM work_ship WHERE date_work = '{datework}'", user) is None:
                            await message.answer(text='–ú–∞—Ä—à—Ä—É—Ç–Ω—ã–π –ª–∏—Å—Ç –Ω–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω!')
                        else:
                            if selone(f"SELECT date_work FROM work_drive WHERE date_work = '{datework}'", user) is None:
                                res = 'crash_'
                                update(f"UPDATE users SET act_log = '{res}' WHERE id_user = '{user}'", user)
                                await message.answer(text=f'–ü–æ–∫–∞–∑–∞–Ω–∏—è –ø—Ä–æ–±–µ–≥–∞:', reply_markup=markups.back)
                            else:
                                await message.answer(text='–°–µ–≥–æ–¥–Ω—è—à–Ω—è—è —Å–º–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')
                elif 'crash_' in selone(f"SELECT act_log FROM users WHERE id_user = '{user}'", user)['act_log']:
                    if message.text.isdigit():
                        res = 'why_' + message.text
                        update(f"UPDATE users SET act_log = '{res}' WHERE id_user = '{user}'", user)

                        inline_crash = InlineKeyboardMarkup(row_width=1)
                        inline_crash_b1 = InlineKeyboardButton(text='–î–∞', callback_data='crash_yes')
                        inline_crash_b2 = InlineKeyboardButton(text='–ù–µ—Ç', callback_data='crash_no')
                        inline_crash.add(inline_crash_b1).add(inline_crash_b2)

                        await message.answer(text=f'–ï—Å—Ç—å –ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è –Ω–∞ –∫—É–∑–æ–≤–µ?', reply_markup=inline_crash)
                    else:
                        await message.answer(text=f'–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–±–µ–≥ —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º!')
                elif 'why_' in selone(f"SELECT act_log FROM users WHERE id_user = '{user}'", user)['act_log']:
                    inline_crash = InlineKeyboardMarkup(row_width=1)
                    inline_crash_b1 = InlineKeyboardButton(text='–î–∞', callback_data='crash_yes')
                    inline_crash_b2 = InlineKeyboardButton(text='–ù–µ—Ç', callback_data='crash_no')
                    inline_crash.add(inline_crash_b1).add(inline_crash_b2)

                    await message.answer(text=f'–ï—Å—Ç—å –ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è –Ω–∞ –∫—É–∑–æ–≤–µ?', reply_markup=inline_crash)
                elif 'cryes_' in selone(f"SELECT act_log FROM users WHERE id_user = '{user}'", user)['act_log']:
                    res = selone(f"SELECT act_log FROM users WHERE id_user = '{user}'", user)['act_log'].split('_')
                    update(f"UPDATE users SET act_log = ' ' WHERE id_user = '{user}'", user)
                    datework = sk.date_create()
                    create(f"INSERT INTO `data`.`work_drive` (`date_work`, `crash_auto`, `km_auto`) VALUES ('{datework}', '{message.text}', '{res[1]}')", user)
                    admins = selist(f"SELECT id_user FROM users WHERE driver = 1", user)
                    for adm in admins:
                        id_adm = adm['id_user']
                        update(f"UPDATE users SET driver = 2 WHERE id_user = '{id_adm}'", user)

                    name_user_log = selone(f"SELECT name_user FROM users WHERE id_user = '{user}'", user)['name_user']

                    list_users = selist(f"SELECT * FROM users WHERE company = '–ë–æ—Å—Å'", user)
                    for user1 in list_users:
                        try:
                            chat_id = str(user1["id_user"])
                            destination_bot = Bot(token='6682205213:AAFFV1avM8cVCZhgv-K8pzKeJ_c20Wle_P4')
                            await destination_bot.send_message(chat_id, f'–í–æ–¥–∏—Ç–µ–ª—å *{name_user_log}* –≤—ã—à–µ–ª –Ω–∞ —Å–º–µ–Ω—É\n\n–ü–æ–∫–∞–∑–∞–Ω–∏—è –ø—Ä–æ–±–µ–≥–∞: *{res[1]}*', parse_mode='Markdown')
                        except Exception as e:
                            await bot.send_message(-4077236615, f'üöö –ë–æ—Ç –ª–æ–≥–∏—Å—Ç–∏–∫–∏\n\n{user}\n–û—à–∏–±–∫–∞ 590\n{e}\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª: {message.text}')

                    await message.answer(text='–°–º–µ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∞!', reply_markup=markups.menu_log_n)

                # –ó–∞–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É
                elif message.text == markups.menu_log_b3:
                    datework = sk.date_create()
                    if selone(f"SELECT driver FROM users WHERE id_user = '{user}'", user)['driver'] == 1:
                        await message.answer(text='–°–º–µ–Ω–∞ –±—ã–ª–∞ —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞!', reply_markup=markups.menu_log_b)
                    else:
                        if len(selist(f"SELECT * FROM shipping WHERE date_ship = '{datework}' AND status_ship <> '–û—Ç–º–µ–Ω–µ–Ω' AND status_ship <> '–ó–∞–∫–æ–Ω—á–µ–Ω'", user)) == 0:
                            admins = selist(f"SELECT id_user FROM users WHERE driver = 2", user)
                            for adm in admins:
                                id_adm = adm['id_user']
                                update(f"UPDATE users SET driver = 1 WHERE id_user = '{id_adm}'", user)

                            await message.answer(text='–°–º–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∞!', reply_markup=markups.menu_log_b)
                        else:
                            await message.answer(text='–ù–µ –≤—Å–µ –∑–∞—è–≤–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!')

                # –ó–∞–≥—Ä—É–∑–∫–∏
                elif message.text == markups.menu_log_b1:
                    if selone(f"SELECT date_work FROM work_drive WHERE date_work = '{sk.date_create()}'", user) is None:
                            await message.answer(text='–í—á–µ—Ä–∞—à–Ω—è—è —Å–º–µ–Ω–∞ –Ω–µ –±—ã–ª–∞ –∑–∞–∫—Ä—ã—Ç–∞! –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é!')
                    else:
                        if len(selist(f"SELECT * FROM shipping WHERE date_ship = '{datework}' AND status_ship = '–ü—Ä–∏–Ω—è—Ç'", user)) == 0:
                            if len(selist(f"SELECT * FROM shipping WHERE date_ship = '{datework}' AND status_ship = '–í –æ—á–µ—Ä–µ–¥–∏'", user)) != 0:
                                await message.answer(text='*–û—á–µ—Ä–µ–¥—å –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É:*', reply_markup=markups.back)
                                newlist = selist(f"SELECT * FROM shipping WHERE date_ship = '{datework}' AND status_ship = '–í –æ—á–µ—Ä–µ–¥–∏'", user)

                                id_list = []
                                list_log = sorted(newlist, key=lambda d: d['num_ship'])
                                for l in list_log:
                                    inline_m = InlineKeyboardMarkup(row_width=2)
                                    inline_m_b1 = InlineKeyboardButton(text='–ü—Ä–∏–Ω—è—Ç—å', callback_data=f'access_{l["id_ship"]}')
                                    inline_m_b2 = InlineKeyboardButton(text='–ù–µ –¥–æ–∑–≤–æ–Ω–∏–ª—Å—è', callback_data=f'nophone_{l["id_ship"]}')
                                    inline_m_b3 = InlineKeyboardButton(text='–ü–µ—Ä–µ–Ω–æ—Å', callback_data=f'edite_{l["id_ship"]}')
                                    inline_m_b4 = InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞ –∑–∞—è–≤–∫–∏', callback_data=f'cancel_{l["id_ship"]}')
                                    inline_m.add(inline_m_b1, inline_m_b2).add(inline_m_b3).add(inline_m_b4)
                                    msg = await message.answer(text=f'ID: *{l["id_ship"]}*\n'
                                                              f'–¢–∏–ø: *{l["type_ship"]}*\n'
                                                              f'–î–∞—Ç–∞: *{l["date_ship"]}*\n'
                                                              f'–í—Ä–µ–º—è: *{l["time_ship"]}*\n'
                                                              f'–ü—Ä–µ–¥–º–µ—Ç: *{l["item_ship"]}*\n'
                                                              f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: *{l["count_item_ship"]}*\n'
                                                              f'–í–µ—Å: *{l["w_ship"]}*\n\n'
                                                              f'–ê–¥—Ä–µ—Å –∑–∞–≥—Ä—É–∑–∫–∏: `{l["adress_begin"]}`\n'
                                                              f'–¢–µ–ª–µ—Ñ–æ–Ω –∑–∞–≥—Ä—É–∑–∫–∏: `{l["phone_begin"]}`\n'
                                                              f'–ê–¥—Ä–µ—Å —Ä–∞–∑–≥—Ä—É–∑–∫–∏: `{l["adress_end"]}`\n'
                                                              f'–¢–µ–ª–µ—Ñ–æ–Ω —Ä–∞–∑–≥—Ä—É–∑–∫–∏: `{l["phone_end"]}`\n'
                                                              f'–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: *{l["comment_ship"]}*\n\n'
                                                              f'–°—Ç–∞—Ç—É—Å: *{l["status_ship"]}*', parse_mode='Markdown', reply_markup=inline_m)

                                    id_list.append(str(msg.message_id))

                                str_id_list = '_'.join(id_list)
                                update(f"UPDATE users SET id_list = '{str_id_list}' WHERE id_user = '{user}'", user)



                            else:
                                await message.answer(text='–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞!')
                        else:
                            await message.answer(text='*–£ –≤–∞—Å –ø—Ä–∏–Ω—è—Ç–∞ –∑–∞—è–≤–∫–∞:*', reply_markup=markups.back)
                            l = selist(f"SELECT * FROM shipping WHERE date_ship = '{datework}' AND status_ship = '–ü—Ä–∏–Ω—è—Ç'", user)[0]

                            inline_m = InlineKeyboardMarkup(row_width=2)
                            inline_m_b1 = InlineKeyboardButton(text='–ó–∞–≥—Ä—É–∑–∏–ª—Å—è', callback_data=f'wacc_{l["id_ship"]}')
                            inline_m_b2 = InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞ –∑–∞—è–≤–∫–∏', callback_data=f'cancel_{l["id_ship"]}')
                            inline_m.add(inline_m_b1).add(inline_m_b2)
                            await message.answer(text=f'ID: *{l["id_ship"]}*\n'
                                                      f'–¢–∏–ø: *{l["type_ship"]}*\n'
                                                      f'–î–∞—Ç–∞: *{l["date_ship"]}*\n'
                                                      f'–í—Ä–µ–º—è: *{l["time_ship"]}*\n'
                                                      f'–ü—Ä–µ–¥–º–µ—Ç: *{l["item_ship"]}*\n'
                                                      f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: *{l["count_item_ship"]}*\n'
                                                      f'–í–µ—Å: *{l["w_ship"]}*\n\n'
                                                      f'–ê–¥—Ä–µ—Å –∑–∞–≥—Ä—É–∑–∫–∏: `{l["adress_begin"]}`\n'
                                                      f'–¢–µ–ª–µ—Ñ–æ–Ω –∑–∞–≥—Ä—É–∑–∫–∏: `{l["phone_begin"]}`\n'
                                                      f'–ê–¥—Ä–µ—Å —Ä–∞–∑–≥—Ä—É–∑–∫–∏: `{l["adress_end"]}`\n'
                                                      f'–¢–µ–ª–µ—Ñ–æ–Ω —Ä–∞–∑–≥—Ä—É–∑–∫–∏: `{l["phone_end"]}`\n'
                                                      f'–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: *{l["comment_ship"]}*\n\n'
                                                      f'–°—Ç–∞—Ç—É—Å: *{l["status_ship"]}*', parse_mode='Markdown', reply_markup=inline_m)
                elif 'waitno_' in selone(f"SELECT act_log FROM users WHERE id_user = '{user}'", user)['act_log']:
                    th_res = selone(f"SELECT act_log FROM users WHERE id_user = '{user}'", user)['act_log']
                    sec_res = th_res.split('_')
                    id_ship = sec_res[1]
                    update(f"UPDATE users SET act_log = ' ' WHERE id_user = '{user}'", user)
                    update(f"UPDATE shipping SET adress_begin = '{message.text}' WHERE id_ship = '{id_ship}'", user)

                    l = selist(f"SELECT * FROM shipping WHERE id_ship = '{id_ship}'", user)[0]

                    inline_m = InlineKeyboardMarkup(row_width=2)
                    inline_m_b1 = InlineKeyboardButton(text='–ü—Ä–∏–Ω—è—Ç—å', callback_data=f'access_{l["id_ship"]}')
                    inline_m_b2 = InlineKeyboardButton(text='–ù–µ –¥–æ–∑–≤–æ–Ω–∏–ª—Å—è', callback_data=f'nophone_{l["id_ship"]}')
                    inline_m_b3 = InlineKeyboardButton(text='–ü–µ—Ä–µ–Ω–æ—Å', callback_data=f'edite_{l["id_ship"]}')
                    inline_m.add(inline_m_b1, inline_m_b2).add(inline_m_b3)
                    await message.answer(text=f'ID: *{l["id_ship"]}*\n'
                                                       f'–¢–∏–ø: *{l["type_ship"]}*\n'
                                                       f'–î–∞—Ç–∞: *{l["date_ship"]}*\n'
                                                       f'–í—Ä–µ–º—è: *{l["time_ship"]}*\n'
                                                       f'–ü—Ä–µ–¥–º–µ—Ç: *{l["item_ship"]}*\n'
                                                       f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: *{l["count_item_ship"]}*\n'
                                                       f'–í–µ—Å: *{l["w_ship"]}*\n\n'
                                                       f'–ê–¥—Ä–µ—Å –∑–∞–≥—Ä—É–∑–∫–∏: `{l["adress_begin"]}`\n'
                                                       f'–¢–µ–ª–µ—Ñ–æ–Ω –∑–∞–≥—Ä—É–∑–∫–∏: `{l["phone_begin"]}`\n'
                                                       f'–ê–¥—Ä–µ—Å —Ä–∞–∑–≥—Ä—É–∑–∫–∏: `{l["adress_end"]}`\n'
                                                       f'–¢–µ–ª–µ—Ñ–æ–Ω —Ä–∞–∑–≥—Ä—É–∑–∫–∏: `{l["phone_end"]}`\n'
                                                       f'–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: *{l["comment_ship"]}*\n\n'
                                                       f'–°—Ç–∞—Ç—É—Å: *{l["status_ship"]}*', parse_mode='Markdown', reply_markup=inline_m)
                elif 'wacc_' in selone(f"SELECT act_log FROM users WHERE id_user = '{user}'", user)['act_log']:
                    if message.text.isdigit():
                        th_res = selone(f"SELECT act_log FROM users WHERE id_user = '{user}'", user)['act_log']
                        sec_res = th_res.split('_')
                        id_ship = sec_res[1]
                        update(f"UPDATE users SET act_log = ' ' WHERE id_user = '{user}'", user)

                        if int(message.text) != int(selone(f"SELECT count_item_ship FROM shipping WHERE id_ship = '{id_ship}'", user)['count_item_ship']):
                            list_all_users = selist(f"SELECT * FROM users WHERE company = '–ë–æ—Å—Å'", user)
                            list_users = []
                            for us in list_all_users:
                                if 'log' in us['notif']:
                                    list_users.append(us)
                            list_ship = selist(f"SELECT * FROM shipping WHERE id_ship = '{id_ship}'", user)[0]
                            for user1 in list_users:
                                try:
                                    chat_id = str(user1["id_user"])
                                    destination_bot = Bot(token='6682205213:AAFFV1avM8cVCZhgv-K8pzKeJ_c20Wle_P4')
                                    await destination_bot.send_message(chat_id, f'–ò–∑–º–µ–Ω–µ–Ω–æ –≤–æ–¥–∏—Ç–µ–ª–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π —É –∑–∞—è–≤–∫–∏ —Å ID: {id_ship}\n\n'
                                                                                f'–¢–∏–ø: *{list_ship["type_ship"]}*\n'
                                                                                f'–ü—Ä–µ–¥–º–µ—Ç: *{list_ship["item_ship"]}*\n'
                                                                                f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—ã–ª–æ: *{list_ship["count_item_ship"]}*\n'
                                                                                f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–ª–æ: *{message.text}*\n'
                                                                                f'–ê–¥—Ä–µ—Å –∑–∞–≥—Ä—É–∑–∫–∏: *{list_ship["adress_begin"]}*\n'
                                                                                f'–ê–¥—Ä–µ—Å —Ä–∞–∑–≥—Ä—É–∑–∫–∏: *{list_ship["adress_end"]}*\n', parse_mode='Markdown')

                                except Exception as e:
                                    await bot.send_message(-4077236615, f'üöö –ë–æ—Ç –ª–æ–≥–∏—Å—Ç–∏–∫–∏\n\n{user}\n–û—à–∏–±–∫–∞ 714\n{str(user1["id_user"])}\n{e}\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª: {message.text}')

                        update(f"UPDATE shipping SET count_item_ship = '{message.text}' WHERE id_ship = '{id_ship}'", user)
                        update(f"UPDATE shipping SET status_ship = '–ï–¥–µ—Ç –∫ –ø–æ–ª—É—á–∞—Ç–µ–ª—é' WHERE id_ship = '{id_ship}'", user)

                        l = selist(f"SELECT * FROM shipping WHERE id_ship = '{id_ship}'", user)[0]

                        inline_m = InlineKeyboardMarkup(row_width=2)
                        inline_m_b1 = InlineKeyboardButton(text='–†–∞–∑–≥—Ä—É–∑–∏–ª—Å—è', callback_data=f'done_{l["id_ship"]}')
                        inline_m.add(inline_m_b1)
                        await message.answer(text=f'ID: *{l["id_ship"]}*\n'
                                                  f'–¢–∏–ø: *{l["type_ship"]}*\n'
                                                  f'–î–∞—Ç–∞: *{l["date_ship"]}*\n'
                                                  f'–í—Ä–µ–º—è: *{l["time_ship"]}*\n'
                                                  f'–ü—Ä–µ–¥–º–µ—Ç: *{l["item_ship"]}*\n'
                                                  f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: *{l["count_item_ship"]}*\n'
                                                  f'–í–µ—Å: *{l["w_ship"]}*\n\n'
                                                  f'–ê–¥—Ä–µ—Å –∑–∞–≥—Ä—É–∑–∫–∏: `{l["adress_begin"]}`\n'
                                                  f'–¢–µ–ª–µ—Ñ–æ–Ω –∑–∞–≥—Ä—É–∑–∫–∏: `{l["phone_begin"]}`\n'
                                                  f'–ê–¥—Ä–µ—Å —Ä–∞–∑–≥—Ä—É–∑–∫–∏: `{l["adress_end"]}`\n'
                                                  f'–¢–µ–ª–µ—Ñ–æ–Ω —Ä–∞–∑–≥—Ä—É–∑–∫–∏: `{l["phone_end"]}`\n'
                                                  f'–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: *{l["comment_ship"]}*\n\n'
                                                  f'–°—Ç–∞—Ç—É—Å: *{l["status_ship"]}*', parse_mode='Markdown', reply_markup=inline_m)

                        id_car = l["car_id"]
                        if id_car != 0:
                            delta_1 = datetime.timedelta(hours=5)
                            now = datetime.datetime.now() + delta_1
                            mes = f'{now.hour}:{now.minute} | {now.day}.{now.month}.{now.year}'

                            list_fbo = selist(f"SELECT * FROM fbo WHERE car_id = '{id_car}' and ff_city = 0", user)

                            for i in list_fbo:
                                if i['own_fbo'] != 0:
                                    fbo_id = i['fbo_id']
                                    update(f"UPDATE new_fbo SET status = 3 WHERE id_fbo = '{fbo_id}'", user)
                                    id_client = selone(f"SELECT own_fbo FROM fbo WHERE fbo_id = '{fbo_id}'", user)[
                                        'own_fbo']
                                    try:
                                        nons = selone(f"SELECT nons FROM new_fbo WHERE id_fbo = '{int(fbo_id)}'", user)[
                                            'nons']
                                        status_zakaz = 3
                                        update(
                                            f"UPDATE new_fbo SET status_zakaz = '{status_zakaz}' WHERE nons = '{nons}'",
                                            user)
                                        list_zakaz = selist(f"SELECT * FROM new_fbo WHERE nons = '{nons}'", user)
                                        id_user = list_zakaz[0]["own_zakaz"]
                                        list_client = selist(f"SELECT * FROM clients WHERE id_user = '{id_user}'", user)

                                        if list_zakaz[0]["status_zakaz"] == 80:
                                            status_zakaz = '–ù–µ –ø—Ä–∏–Ω—è—Ç–æ –Ω–∞ —Ñ—É–ª—Ñ–∏–ª–º–µ–Ω—Ç–µ'
                                        elif list_zakaz[0]["status_zakaz"] == 100:
                                            status_zakaz = '–û—Ç–º–µ–Ω–µ–Ω'
                                        elif list_zakaz[0]["status_zakaz"] == 0:
                                            status_zakaz = '–ü—Ä–∏–Ω—è—Ç–æ –Ω–∞ —Ñ—É–ª—Ñ–∏–ª–º–µ–Ω—Ç–µ'
                                        elif list_zakaz[0]["status_zakaz"] == 1:
                                            status_zakaz = '–û–±—Ä–∞–±–æ—Ç–∫–∞...'
                                        elif list_zakaz[0]["status_zakaz"] == 2:
                                            status_zakaz = '–ì–æ—Ç–æ–≤ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ'
                                        elif list_zakaz[0]["status_zakaz"] == 3:
                                            status_zakaz = '–î–æ—Å—Ç–∞–≤–∫–∞...'
                                        elif list_zakaz[0]["status_zakaz"] == 4:
                                            status_zakaz = '–î–æ—Å—Ç–∞–≤–ª–µ–Ω'
                                        elif list_zakaz[0]["status_zakaz"] == 5:
                                            status_zakaz = '–ù–µ –ø—Ä–∏–Ω—è—Ç–æ –Ω–∞ —Å–∫–ª–∞–¥–µ. –û–±—Ä–∞–±–æ—Ç–∫–∞...'

                                        zakaz_text = f'–£ –í–∞—à–µ–π –∑–∞—è–≤–∫–∏ —Å ID {list_zakaz[0]["id_zakaz"]} –∏–∑–º–µ–Ω–∏–ª—Å—è —Å—Ç–∞—Ç—É—Å!\n' \
                                                     f'\n<i>–°–∫–ª–∞–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏:</i> <b>{list_zakaz[0]["city"]}</b>' \
                                                     f'\n<i>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞:</i> <b>{list_zakaz[0]["count_items"]}</b>' \
                                                     f'\n<i>–í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏:</i> <b>{mes}</b>' \
                                                     f'\n<i>–°—Ç–∞—Ç—É—Å:</i> <b>{status_zakaz}</b>'

                                        try:
                                            chat_id = str(id_user)
                                            destination_bot = Bot(
                                                token='6220819545:AAFS7TBQlmaZfpBEyoooOL-ac0YZQFxzec0')
                                            await destination_bot.send_message(chat_id, zakaz_text, parse_mode='html')
                                        except:
                                            pass
                                    except:
                                        pass

                            update(f"UPDATE cars SET count_pal = '1' WHERE car_id = '{id_car}'", user)
                            update(f"UPDATE cars SET fact_start_date = '{mes}' WHERE car_id = '{id_car}'", user)

                        if l["type_ship"] == '–ó–∞–±–æ—Ä' and l["nons"] != '0':
                            nons_us = l["nons"]
                            update(f"UPDATE new_fbo SET status_zakaz = 83 WHERE nons = '{nons_us}'", user)

                            list_zakaz = selist(f"SELECT * FROM new_fbo WHERE nons = '{nons_us}'", user)
                            id_user = list_zakaz[0]["own_zakaz"]
                            list_client = selist(f"SELECT * FROM clients WHERE id_user = '{id_user}'", user)

                            zakaz_text = f'–£ –í–∞—à–µ–π –∑–∞—è–≤–∫–∏ —Å ID {list_zakaz[0]["id_zakaz"]} –∏–∑–º–µ–Ω–∏–ª—Å—è —Å—Ç–∞—Ç—É—Å!\n' \
                                         f'\n<i>–°–∫–ª–∞–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏:</i> <b>{list_zakaz[0]["city"]}</b>' \
                                         f'\n<i>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞:</i> <b>{list_zakaz[0]["count_items"]}</b>' \
                                         f'\n<i>–°—Ç–∞—Ç—É—Å:</i> <b>–ì—Ä—É–∑ –µ–¥–µ—Ç –Ω–∞ —Ñ—É–ª—Ñ–∏–ª–º–µ–Ω—Ç</b>'

                            try:
                                chat_id = str(id_user)
                                destination_bot = Bot(token='6220819545:AAFS7TBQlmaZfpBEyoooOL-ac0YZQFxzec0')
                                await destination_bot.send_message(chat_id, zakaz_text, parse_mode='html')
                            except Exception as e:
                                await bot.send_message(-4077236615, f'üöö –ë–æ—Ç –ª–æ–≥–∏—Å—Ç–∏–∫–∏\n\n{user}\n–û—à–∏–±–∫–∞ 756\n{e}')
                    else:
                        await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∏—Å–ª–æ–º!')
                elif 'edite_' in selone(f"SELECT act_log FROM users WHERE id_user = '{user}'", user)['act_log']:
                    callback_data = selone(f"SELECT act_log FROM users WHERE id_user = '{user}'", user)['act_log']
                    list_call = callback_data.split('_')
                    id_ship = list_call[1]
                    if len(message.text.split('.')) == 3 and len(message.text) == 10:
                        delta_1 = datetime.timedelta(hours=5)
                        now = datetime.datetime.now() + delta_1

                        if ((int(message.text[0:2]) < int(now.day)) and (int(message.text[3:5]) == int(now.month))) or (
                                int(message.text[3:5]) < int(now.month)):
                            await message.answer(text='–í—ã –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –¥–∞—Ç—É –Ω–∞—á–∏–Ω–∞—è —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è:')

                        elif (int(message.text[0:2]) == int(now.day)) and (int(sk.time_create()[0:2]) > 18):
                            await message.answer(text='–ù–∞ —Å–µ–≥–æ–¥–Ω—è –≤—ã —É–∂–µ –Ω–µ –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É, —É–∫–∞–∂–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É:')

                        else:
                            update(f"UPDATE users SET edit_log = ' ' WHERE id_user = '{user}'", user)
                            update(f"UPDATE users SET act_log = ' ' WHERE id_user = '{user}'", user)
                            update(f"UPDATE shipping SET date_ship = '{message.text}' WHERE id_ship = '{id_ship}'", user)
                            update(f"UPDATE shipping SET num_ship = 0 WHERE id_ship = '{id_ship}'", user)

                            l = selist(f"SELECT * FROM shipping WHERE id_ship = '{id_ship}'", user)[0]

                            list_all_users = selist(f"SELECT * FROM users WHERE company = '–ë–æ—Å—Å'", user)
                            list_users = []
                            for us in list_all_users:
                                if 'log' in us['notif']:
                                    list_users.append(us)
                            for user1 in list_users:
                                try:
                                    chat_id = str(user1["id_user"])
                                    destination_bot = Bot(token='6682205213:AAFFV1avM8cVCZhgv-K8pzKeJ_c20Wle_P4')
                                    await destination_bot.send_message(chat_id, f'–í–æ–¥–∏—Ç–µ–ª—å –∏–∑–º–µ–Ω–∏–ª –¥–∞—Ç—É —É –∑–∞—è–≤–∫–∏ —Å ID: {id_ship}!\n\n'
                                                                                f'–¢–∏–ø: *{l["type_ship"]}*\n'
                                                                                f'–î–∞—Ç–∞: *{l["date_ship"]}*\n'
                                                                                f'–í—Ä–µ–º—è: *{l["time_ship"]}*\n'
                                                                                f'–ü—Ä–µ–¥–º–µ—Ç: *{l["item_ship"]}*\n'
                                                                                f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: *{l["count_item_ship"]}*\n'
                                                                                f'–í–µ—Å: *{l["w_ship"]}*\n\n'
                                                                                f'–ê–¥—Ä–µ—Å –∑–∞–≥—Ä—É–∑–∫–∏: `{l["adress_begin"]}`\n'
                                                                                f'–¢–µ–ª–µ—Ñ–æ–Ω –∑–∞–≥—Ä—É–∑–∫–∏: `{l["phone_begin"]}`\n'
                                                                                f'–ê–¥—Ä–µ—Å —Ä–∞–∑–≥—Ä—É–∑–∫–∏: `{l["adress_end"]}`\n'
                                                                                f'–¢–µ–ª–µ—Ñ–æ–Ω —Ä–∞–∑–≥—Ä—É–∑–∫–∏: `{l["phone_end"]}`\n'
                                                                                f'–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: *{l["comment_ship"]}*\n\n'
                                                                                f'–°—Ç–∞—Ç—É—Å: *{l["status_ship"]}*', parse_mode='Markdown')
                                except Exception as e:
                                    await bot.send_message(-4077236615, f'üöö –ë–æ—Ç –ª–æ–≥–∏—Å—Ç–∏–∫–∏\n\n{user}\n–û—à–∏–±–∫–∞ 801\n{e}\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª: {message.text}')

                            await message.answer(text='–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∞!', reply_markup=markups.menu_log_n)

                            if l["type_ship"] == '–ó–∞–±–æ—Ä' and l["nons"] != '0':
                                nons_us = l["nons"]
                                old_zabor = selone(f"SELECT zabor FROM new_fbo WHERE nons = '{nons_us}'", user)['zabor'].split('_')

                                res2 = f'{message.text}_{old_zabor[1]}_{old_zabor[2]}'

                                update(f"UPDATE new_fbo SET zabor = '{nons_us}' WHERE nons = '{nons_us}'", user)

                                list_zakaz = selist(f"SELECT * FROM new_fbo WHERE nons = '{nons_us}'", user)
                                id_user = list_zakaz[0]["own_zakaz"]
                                list_client = selist(f"SELECT * FROM clients WHERE id_user = '{id_user}'", user)

                                zakaz_text = f'–£ –í–∞—à–µ–π –∑–∞—è–≤–∫–∏ —Å ID {list_zakaz[0]["id_zakaz"]} –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –¥–∞—Ç–∞ –∑–∞–±–æ—Ä–∞!\n' \
                                             f'\n<i>–°–∫–ª–∞–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏:</i> <b>{list_zakaz[0]["city"]}</b>' \
                                             f'\n<i>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞:</i> <b>{list_zakaz[0]["count_items"]}</b>' \
                                             f'\n\n<i>–î–∞—Ç–∞ –∑–∞–±–æ—Ä–∞:</i> <b>{message.text}</b>'

                                try:
                                    chat_id = str(id_user)
                                    destination_bot = Bot(token='6220819545:AAFS7TBQlmaZfpBEyoooOL-ac0YZQFxzec0')
                                    await destination_bot.send_message(chat_id, zakaz_text, parse_mode='html')
                                except Exception as e:
                                    await bot.send_message(-4077236615, f'üöö –ë–æ—Ç –ª–æ–≥–∏—Å—Ç–∏–∫–∏\n\n{user}\n–û—à–∏–±–∫–∞ 827\n{e}')
                    else:
                        await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ 01.11.2023')

                # –†–∞–∑–≥—Ä—É–∑–∫–∏
                elif message.text == markups.menu_log_b2:
                    if selone(f"SELECT date_work FROM work_drive WHERE date_work = '{sk.date_create()}'", user) is None:
                            await message.answer(text='–í—á–µ—Ä–∞—à–Ω—è—è —Å–º–µ–Ω–∞ –Ω–µ –±—ã–ª–∞ –∑–∞–∫—Ä—ã—Ç–∞! –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é!')
                    else:
                        if len(selist(f"SELECT * FROM shipping WHERE date_ship = '{datework}' AND status_ship = '–ï–¥–µ—Ç –∫ –ø–æ–ª—É—á–∞—Ç–µ–ª—é'", user)) != 0:
                            await message.answer(text='*–û—á–µ—Ä–µ–¥—å –∑–∞—è–≤–æ–∫ –Ω–∞ —Ä–∞–∑–≥—Ä—É–∑–∫—É:*', reply_markup=markups.back)
                            newlist = selist(f"SELECT * FROM shipping WHERE date_ship = '{datework}' AND status_ship = '–ï–¥–µ—Ç –∫ –ø–æ–ª—É—á–∞—Ç–µ–ª—é'", user)

                            id_list = []
                            list_log = sorted(newlist, key=lambda d: d['num_ship'])
                            for l in list_log:
                                inline_m = InlineKeyboardMarkup(row_width=2)
                                inline_m_b1 = InlineKeyboardButton(text='–†–∞–∑–≥—Ä—É–∑–∏–ª—Å—è', callback_data=f'done_{l["id_ship"]}')
                                inline_m.add(inline_m_b1)
                                msg = await message.answer(text=f'ID: *{l["id_ship"]}*\n'
                                                          f'–¢–∏–ø: *{l["type_ship"]}*\n'
                                                          f'–î–∞—Ç–∞: *{l["date_ship"]}*\n'
                                                          f'–í—Ä–µ–º—è: *{l["time_ship"]}*\n'
                                                          f'–ü—Ä–µ–¥–º–µ—Ç: *{l["item_ship"]}*\n'
                                                          f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: *{l["count_item_ship"]}*\n'
                                                          f'–í–µ—Å: *{l["w_ship"]}*\n\n'
                                                          f'–ê–¥—Ä–µ—Å –∑–∞–≥—Ä—É–∑–∫–∏: `{l["adress_begin"]}`\n'
                                                          f'–¢–µ–ª–µ—Ñ–æ–Ω –∑–∞–≥—Ä—É–∑–∫–∏: `{l["phone_begin"]}`\n'
                                                          f'–ê–¥—Ä–µ—Å —Ä–∞–∑–≥—Ä—É–∑–∫–∏: `{l["adress_end"]}`\n'
                                                          f'–¢–µ–ª–µ—Ñ–æ–Ω —Ä–∞–∑–≥—Ä—É–∑–∫–∏: `{l["phone_end"]}`\n'
                                                          f'–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: *{l["comment_ship"]}*\n\n'
                                                          f'–°—Ç–∞—Ç—É—Å: *{l["status_ship"]}*', parse_mode='Markdown', reply_markup=inline_m)
                                id_list.append(str(msg.message_id))

                            str_id_list = '_'.join(id_list)
                            update(f"UPDATE users SET id_list = '{str_id_list}' WHERE id_user = '{user}'", user)
                        else:
                            await message.answer(text='*–û—á–µ—Ä–µ–¥—å –∑–∞—è–≤–æ–∫ –Ω–∞ —Ä–∞–∑–≥—Ä—É–∑–∫—É –ø—É—Å—Ç–∞*')
                elif 'done_' in selone(f"SELECT act_log FROM users WHERE id_user = '{user}'", user)['act_log']:
                    th_res = selone(f"SELECT act_log FROM users WHERE id_user = '{user}'", user)['act_log']
                    sec_res = th_res.split('_')
                    id_ship = sec_res[1]
                    update(f"UPDATE users SET act_log = ' ' WHERE id_user = '{user}'", user)
                    time_sk = sk.date_and_time_create()
                    update(f"UPDATE shipping SET end_ship = '{time_sk}' WHERE id_ship = '{id_ship}'", user)

                    list_all_users = selist(f"SELECT * FROM users WHERE company = '–ë–æ—Å—Å'", user)
                    list_users = []
                    for us in list_all_users:
                        if 'log' in us['notif']:
                            list_users.append(us)
                    list_ship = selist(f"SELECT * FROM shipping WHERE id_ship = '{id_ship}'", user)[0]
                    for user1 in list_users:
                        try:
                            chat_id = str(user1["id_user"])
                            destination_bot = Bot(token='6682205213:AAFFV1avM8cVCZhgv-K8pzKeJ_c20Wle_P4')
                            await destination_bot.send_message(chat_id, f'–ó–∞—è–≤–∫–∞ —Å ID: {id_ship} –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–ü—Ä–∏–Ω—è–ª –≥—Ä—É–∑: {message.text}\n\n'
                                                                        f'–¢–∏–ø: *{list_ship["type_ship"]}*\n'
                                                                        f'–ü—Ä–µ–¥–º–µ—Ç: *{list_ship["item_ship"]}*\n'
                                                                        f'–ê–¥—Ä–µ—Å –∑–∞–≥—Ä—É–∑–∫–∏: *{list_ship["adress_begin"]}*\n'
                                                                        f'–í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏: *{list_ship["begin_ship"]}*\n\n'
                                                                        f'–ê–¥—Ä–µ—Å —Ä–∞–∑–≥—Ä—É–∑–∫–∏: *{list_ship["adress_end"]}*\n'
                                                                        f'–í—Ä–µ–º—è —Ä–∞–∑–≥—Ä—É–∑–∫–∏: *{list_ship["end_ship"]}*\n', parse_mode='Markdown')

                        except Exception as e:
                            await bot.send_message(-4077236615, f'üöö –ë–æ—Ç –ª–æ–≥–∏—Å—Ç–∏–∫–∏\n\n{user}\n–û—à–∏–±–∫–∞ 882\n{str(user1["id_user"])}\n{e}\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª: {message.text}')

                    update(f"UPDATE shipping SET status_ship = '–ó–∞–∫–æ–Ω—á–µ–Ω' WHERE id_ship = '{id_ship}'", user)


                    id_car = list_ship["car_id"]
                    if id_car != 0:
                        delta_1 = datetime.timedelta(hours=5)
                        now = datetime.datetime.now() + delta_1
                        mes = f'{now.hour}:{now.minute} | {now.day}.{now.month}.{now.year}'

                        list_fbo = selist(f"SELECT * FROM fbo WHERE car_id = '{id_car}' and ff_city = 0", user)

                        for i in list_fbo:
                            if i['own_fbo'] != 0:
                                fbo_id = i['fbo_id']
                                update(f"UPDATE new_fbo SET status = 4 WHERE id_fbo = '{fbo_id}'", user)
                                id_client = selone(f"SELECT own_fbo FROM fbo WHERE fbo_id = '{fbo_id}'", user)['own_fbo']
                                try:
                                    nons = selone(f"SELECT nons FROM new_fbo WHERE id_fbo = '{int(fbo_id)}'", user)['nons']
                                    status_zakaz = 4
                                    update(f"UPDATE new_fbo SET status_zakaz = '{status_zakaz}' WHERE nons = '{nons}'", user)
                                    list_zakaz = selist(f"SELECT * FROM new_fbo WHERE nons = '{nons}'", user)
                                    id_user = list_zakaz[0]["own_zakaz"]
                                    list_client = selist(f"SELECT * FROM clients WHERE id_user = '{id_user}'", user)

                                    if list_zakaz[0]["status_zakaz"] == 80:
                                        status_zakaz = '–ù–µ –ø—Ä–∏–Ω—è—Ç–æ –Ω–∞ —Ñ—É–ª—Ñ–∏–ª–º–µ–Ω—Ç–µ'
                                    elif list_zakaz[0]["status_zakaz"] == 100:
                                        status_zakaz = '–û—Ç–º–µ–Ω–µ–Ω'
                                    elif list_zakaz[0]["status_zakaz"] == 0:
                                        status_zakaz = '–ü—Ä–∏–Ω—è—Ç–æ –Ω–∞ —Ñ—É–ª—Ñ–∏–ª–º–µ–Ω—Ç–µ'
                                    elif list_zakaz[0]["status_zakaz"] == 1:
                                        status_zakaz = '–û–±—Ä–∞–±–æ—Ç–∫–∞...'
                                    elif list_zakaz[0]["status_zakaz"] == 2:
                                        status_zakaz = '–ì–æ—Ç–æ–≤ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ'
                                    elif list_zakaz[0]["status_zakaz"] == 3:
                                        status_zakaz = '–î–æ—Å—Ç–∞–≤–∫–∞...'
                                    elif list_zakaz[0]["status_zakaz"] == 4:
                                        status_zakaz = '–î–æ—Å—Ç–∞–≤–ª–µ–Ω'
                                    elif list_zakaz[0]["status_zakaz"] == 5:
                                        status_zakaz = '–ù–µ –ø—Ä–∏–Ω—è—Ç–æ –Ω–∞ —Å–∫–ª–∞–¥–µ. –û–±—Ä–∞–±–æ—Ç–∫–∞...'

                                    zakaz_text = f'–£ –í–∞—à–µ–π –∑–∞—è–≤–∫–∏ —Å ID {list_zakaz[0]["id_zakaz"]} –∏–∑–º–µ–Ω–∏–ª—Å—è —Å—Ç–∞—Ç—É—Å!\n' \
                                                 f'\n<i>–°–∫–ª–∞–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏:</i> <b>{list_zakaz[0]["city"]}</b>' \
                                                 f'\n<i>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞:</i> <b>{list_zakaz[0]["count_items"]}</b>' \
                                                 f'\n<i>–°—Ç–∞—Ç—É—Å:</i> <b>{status_zakaz}</b>'

                                    try:
                                        chat_id = str(id_user)
                                        destination_bot = Bot(token='6220819545:AAFS7TBQlmaZfpBEyoooOL-ac0YZQFxzec0')
                                        await destination_bot.send_message(chat_id, zakaz_text, parse_mode='html')
                                    except:
                                        pass
                                except:
                                    pass

                        update(f"UPDATE cars SET gate = '0' WHERE car_id = '{id_car}'", user)
                        update(f"UPDATE cars SET fact_end_date = '{mes}' WHERE car_id = '{id_car}'", user)


                    l = selist(f"SELECT * FROM shipping WHERE id_ship = '{id_ship}'", user)[0]
                    if l["type_ship"] == '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è' and (l["item_ship"] == '–†–∞—Å—Ç—É—â–∏–π —Å—Ç–æ–ª –∏ —Å—Ç—É–ª 1' or l["item_ship"] == '–†–∞—Å—Ç—É—â–∏–π —Å—Ç–æ–ª –∏ —Å—Ç—É–ª 2' or l["item_ship"] == '–ù–∞–ø–æ–ª–Ω–∏—Ç–µ–ª—å 15 –∫–≥' or l["item_ship"] == '–ü–∞—Ä—è—â–∏–µ –ø–æ–ª–∫–∏') and l["adress_end"] == '–°–∞—Ñ—Ä–æ–Ω–æ–≤—Å–∫–∏–π –ø—Ä–æ–µ–∑–¥ 6 (–§–§)':
                        delta_1 = datetime.timedelta(hours=5)
                        now = datetime.datetime.now() + delta_1
                        if int(now.day) < 10:
                            day_edit = '0' + str(now.day)
                        else:
                            day_edit = now.day

                        if int(now.month) < 10:
                            month_edit = '0' + str(now.month)
                        else:
                            month_edit = now.month
                        date_create = f'{day_edit}.{month_edit}.{now.year}'

                        name_list = f"–°–∫–ª–∞–¥—Å–∫–æ–π —É—á–µ—Ç"

                        worksheet = sh.worksheet(name_list)

                        values_list = worksheet.col_values(2)
                        num_row = len(values_list) + 1
                        item_m = l["item_ship"]
                        worksheet.update_cell(num_row, 2, date_create)
                        worksheet.update_cell(num_row, 3, "–¶–ï–•")
                        worksheet.update_cell(num_row, 6, "–§—É–ª—Ñ–∏–ª–º–µ–Ω—Ç")
                        worksheet.update_cell(num_row, 9, '-')
                        worksheet.update_cell(num_row, 15, l["count_item_ship"])
                        worksheet.update_cell(num_row, 11, item_m)

                    if l["type_ship"] == '–î–æ—Å—Ç–∞–≤–∫–∞' and (l["item_ship"] == '–†–∞—Å—Ç—É—â–∏–π —Å—Ç–æ–ª –∏ —Å—Ç—É–ª 1' or l["item_ship"] == '–†–∞—Å—Ç—É—â–∏–π —Å—Ç–æ–ª –∏ —Å—Ç—É–ª 2' or l["item_ship"] == '–ù–∞–ø–æ–ª–Ω–∏—Ç–µ–ª—å 15 –∫–≥' or l["item_ship"] == '–ü–∞—Ä—è—â–∏–µ –ø–æ–ª–∫–∏') and l["adress_begin"] == '–°–∞—Ñ—Ä–æ–Ω–æ–≤—Å–∫–∏–π –ø—Ä–æ–µ–∑–¥ 6 (–§–§)':
                        delta_1 = datetime.timedelta(hours=5)
                        now = datetime.datetime.now() + delta_1
                        if int(now.day) < 10:
                            day_edit = '0' + str(now.day)
                        else:
                            day_edit = now.day

                        if int(now.month) < 10:
                            month_edit = '0' + str(now.month)
                        else:
                            month_edit = now.month
                        date_create = f'{day_edit}.{month_edit}.{now.year}'

                        name_list = f"–°–∫–ª–∞–¥—Å–∫–æ–π —É—á–µ—Ç"

                        worksheet = sh.worksheet(name_list)

                        values_list = worksheet.col_values(2)
                        num_row = len(values_list) + 1
                        item_m = l["item_ship"]
                        worksheet.update_cell(num_row, 2, date_create)
                        worksheet.update_cell(num_row, 3, "–§—É–ª—Ñ–∏–ª–º–µ–Ω—Ç")
                        worksheet.update_cell(num_row, 6, "–ê–≤–∏—Ç–æ")
                        worksheet.update_cell(num_row, 9, '-')
                        worksheet.update_cell(num_row, 15, l["count_item_ship"])
                        worksheet.update_cell(num_row, 11, item_m)


                    if l["type_ship"] == '–ó–∞–±–æ—Ä' and l["nons"] != '0':
                        nons_us = l["nons"]
                        update(f"UPDATE new_fbo SET status_zakaz = 80 WHERE nons = '{nons_us}'", user)

                        list_zakaz = selist(f"SELECT * FROM new_fbo WHERE nons = '{nons_us}'", user)
                        id_user = list_zakaz[0]["own_zakaz"]
                        list_client = selist(f"SELECT * FROM clients WHERE id_user = '{id_user}'", user)

                        zakaz_text = f'–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —Å ID {list_zakaz[0]["id_zakaz"]} –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ñ—É–ª—Ñ–∏–ª–º–µ–Ω—Ç!\n' \
                                     f'\n<i>–°–∫–ª–∞–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏:</i> <b>{list_zakaz[0]["city"]}</b>' \
                                     f'\n<i>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞:</i> <b>{list_zakaz[0]["count_items"]}</b>' \
                                     f'\n<i>–°—Ç–∞—Ç—É—Å:</i> <b>–û–∂–∏–¥–∞–µ—Ç –ø—Ä–∏–µ–º–∫–∏</b>'

                        try:
                            chat_id = str(id_user)
                            destination_bot = Bot(token='6220819545:AAFS7TBQlmaZfpBEyoooOL-ac0YZQFxzec0')
                            await destination_bot.send_message(chat_id, zakaz_text, parse_mode='html')
                        except Exception as e:
                            await bot.send_message(-4077236615, f'üöö –ë–æ—Ç –ª–æ–≥–∏—Å—Ç–∏–∫–∏\n\n{user}\n–û—à–∏–±–∫–∞ 907\n{e}')

                    await message.answer(text='–ó–∞—è–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! ', reply_markup=markups.menu_log_n)

                # –ó–∞–±—Ä–∞–ª –≤–æ–∑–≤—Ä–∞—Ç—ã
                elif message.text == markups.menu_log_b6:
                    update(f"UPDATE users SET act_log = ' ' WHERE id_user = '{user}'", user)
                    list_items = selist(f"SELECT * FROM warehouse_refunds", user)
                    inline_key = InlineKeyboardMarkup(row_width=1)
                    await message.answer(text='–ö–∞–∫—É—é –ø–æ–∑–∏—Ü–∏—é –∑–∞–±—Ä–∞–ª–∏?', reply_markup=markups.back)
                    for i in list_items:
                        inline_key_b1 = InlineKeyboardButton(text=i["name_item"], callback_data=f'ref_{i["id_item"]}')
                        inline_key.add(inline_key_b1)
                    await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞:', reply_markup=inline_key)
                elif 'ref_' in selone(f"SELECT act_log FROM users WHERE id_user = '{user}'", user)['act_log']:
                    if message.text.isdigit():
                        id_item = selone(f"SELECT act_log FROM users WHERE id_user = '{user}'", user)['act_log'].split('_')[1]
                        update(f"UPDATE users SET act_log = ' ' WHERE id_user = '{user}'", user)
                        voz = int(message.text)
                        count_v = selone(f"SELECT count_item FROM warehouse_refunds WHERE id_item = '{id_item}'", user)['count_item']
                        update(f"UPDATE warehouse_refunds SET count_item = '{int(count_v) + int(voz)}' WHERE id_item = '{id_item}'", user)
                        name_item = selone(f"SELECT name_item FROM warehouse_refunds WHERE id_item = '{id_item}'", user)['name_item']
                        list_all_users = selist(f"SELECT * FROM users WHERE company = '–ú–µ–Ω–µ–¥–∂–µ—Ä –ú–ü' OR company = '–ë–æ—Å—Å'", user)
                        list_users = []
                        await message.answer(text='–ì–æ—Ç–æ–≤–æ', reply_markup=markups.menu_log_n)
                        for us in list_all_users:
                            if 'men' in us['notif']:
                                list_users.append(us)
                        for user1 in list_users:
                            try:
                                chat_id = str(user1["id_user"])
                                destination_bot = Bot(token='6629342340:AAG_DI1HQprpkkA5Ruwfd3E6kLO4tmdbXfw')
                                await destination_bot.send_message(chat_id, f'*–í–æ–¥–∏—Ç–µ–ª—å –∑–∞–±—Ä–∞–ª –≤–æ–∑–≤—Ä–∞—Ç—ã!*\n\n'
                                                                            f'–ü–æ–∑–∏—Ü–∏—è: *{name_item}*\n'
                                                                            f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: *{voz}*\n', parse_mode='Markdown')
                            except Exception as e:
                                await bot.send_message(-4077236615,
                                                       f'üöö –ë–æ—Ç –ª–æ–≥–∏—Å—Ç–∏–∫–∏\n\n{user}\n–û—à–∏–±–∫–∞ 1225\n{str(user1["id_user"])}\n{e}')
                    else:
                        await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∏—Å–ª–æ–º!')

                # –ù–î–ó
                elif message.text == markups.menu_log_b5:
                    if selone(f"SELECT date_work FROM work_drive WHERE date_work = '{sk.date_create()}'", user) is None:
                            await message.answer(text='–í—á–µ—Ä–∞—à–Ω—è—è —Å–º–µ–Ω–∞ –Ω–µ –±—ã–ª–∞ –∑–∞–∫—Ä—ã—Ç–∞! –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é!')
                    else:
                        if len(selist(f"SELECT * FROM shipping WHERE date_ship = '{datework}' AND status_ship = '–ù–µ –¥–æ–∑–≤–æ–Ω–∏–ª—Å—è'", user)) != 0:
                            await message.answer(text='*–û—á–µ—Ä–µ–¥—å –∑–∞—è–≤–æ–∫ –ù–î–ó:*', reply_markup=markups.back)
                            newlist = selist(f"SELECT * FROM shipping WHERE date_ship = '{datework}' AND status_ship = '–ù–µ –¥–æ–∑–≤–æ–Ω–∏–ª—Å—è'", user)
                            id_list = []
                            list_log = sorted(newlist, key=lambda d: d['num_ship'])
                            for l in list_log:
                                inline_m = InlineKeyboardMarkup(row_width=2)
                                inline_m_b1 = InlineKeyboardButton(text='–ü—Ä–∏–Ω—è—Ç—å', callback_data=f'access_{l["id_ship"]}')
                                inline_m_b2 = InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞ –∑–∞—è–≤–∫–∏', callback_data=f'cancel_{l["id_ship"]}')
                                inline_m_b3 = InlineKeyboardButton(text='–ü–µ—Ä–µ–Ω–æ—Å', callback_data=f'edite_{l["id_ship"]}')
                                inline_m.add(inline_m_b1).add(inline_m_b2).add(inline_m_b3)
                                msg = await message.answer(text=f'ID: *{l["id_ship"]}*\n'
                                                          f'–¢–∏–ø: *{l["type_ship"]}*\n'
                                                          f'–î–∞—Ç–∞: *{l["date_ship"]}*\n'
                                                          f'–í—Ä–µ–º—è: *{l["time_ship"]}*\n'
                                                          f'–ü—Ä–µ–¥–º–µ—Ç: *{l["item_ship"]}*\n'
                                                          f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: *{l["count_item_ship"]}*\n'
                                                          f'–í–µ—Å: *{l["w_ship"]}*\n\n'
                                                          f'–ê–¥—Ä–µ—Å –∑–∞–≥—Ä—É–∑–∫–∏: `{l["adress_begin"]}`\n'
                                                          f'–¢–µ–ª–µ—Ñ–æ–Ω –∑–∞–≥—Ä—É–∑–∫–∏: `{l["phone_begin"]}`\n'
                                                          f'–ê–¥—Ä–µ—Å —Ä–∞–∑–≥—Ä—É–∑–∫–∏: `{l["adress_end"]}`\n'
                                                          f'–¢–µ–ª–µ—Ñ–æ–Ω —Ä–∞–∑–≥—Ä—É–∑–∫–∏: `{l["phone_end"]}`\n'
                                                          f'–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: *{l["comment_ship"]}*\n\n'
                                                          f'–°—Ç–∞—Ç—É—Å: *{l["status_ship"]}*', parse_mode='Markdown', reply_markup=inline_m)
                                id_list.append(str(msg.message_id))

                            str_id_list = '_'.join(id_list)
                            update(f"UPDATE users SET id_list = '{str_id_list}' WHERE id_user = '{user}'", user)

                        else:
                            await message.answer(text='*–û—á–µ—Ä–µ–¥—å –∑–∞—è–≤–æ–∫ –ù–î–ó –ø—É—Å—Ç–∞*')

                # –ù–µ –ø–æ–Ω—è—Ç–Ω–æ
                else:
                    await message.answer(text='–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª')



if __name__ == '__main__':
    executor.start_polling(db, on_startup=startup, skip_updates=True)